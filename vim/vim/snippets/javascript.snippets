# Many of these snippets are taken from https://github.com/honza/vim-snippets
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${0:// body...}
	};
# Prototype Apply
snippet protoapp
	${1:class_name}.prototype.apply(${2:this}, ${3:arguments});
# Prototype Call
snippet protocall
	${1:class_name}.prototype.call(${2:this}, ${3:args});
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${0:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {
		${0}
	}
# Immediate function
snippet !f
	!function (${1}) {
		${0}
	}(${2});
# if
snippet if
	if (${1:true}) {
		${0}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${0:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
# case
snippet case
	case '${1:case}':
		${2}
		break;
	${0}
# for (...) {...}
snippet for
	for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++) {
		var ${3:v} = $1[$2];${0:}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --) {
		var ${3:v} = $1[$2];${0:}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${0}
	}
# try
snippet try
	try {
		${1}
	} catch (${2:e}) {
		${0:/* handle error */}
	}
# do...while
snippet do
	do {
		${0}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${0}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')
# console.log (Firebug)
snippet cl
	console.log(${0});
# return
snippet ret
	return ${0:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}) {
		${0:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty(${0})
# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */
# multiline comment
snippet /*
	/*
	 * ${1:comment}
	 */
snippet
# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${0:object});
# Lodash
# _
snippet _
	_(${1:target}).${2:method}
# _.forEach
snippet _fore
	_.forEach(${1:target}, function(${2:item}){
		${3:body}
	});
# _.forOwn
snippet _foro
	_.forOwn(${1:target}, function(${2:item}){
		${3:body}
	});
# _.map
snippet _map
	_.map(${1:target}, function(${2:item}){
		${3:body}
	});
# _.bind
snippet _bind
	_.bind(${1:target}, ${2:this});
# _.bindKey
snippet _bindk
	_.bindKey(${1:this}, '${2:prop}');

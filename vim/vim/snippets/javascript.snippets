# Many of the vanilla JS snippets are taken from https://github.com/honza/vim-snippets
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${0:// body...}
	};
# Prototype Apply
snippet protoapp
	${1:class_name}.prototype.${2:method}.apply(${3:this}, ${4:arguments});
# Prototype Call
snippet protocall
	${1:class_name}.prototype.${2:method}call(${3:this}, ${4:args});
# Function
snippet fun
	function ${1:function_name}(${2:argument}){
		${0:// body...}
	}
# Anonymous Function
snippet f
	function (${1}){
		${0}
	}
# Immediate function
snippet !f
	!function (${1}){
		${0}
	}(${2});
# if
snippet if
	if (${1:true}){
		${0}
	}
# if ... else
snippet ife
	if (${1:true}){
		${2}
	} else {
		${0}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${0:b}
# switch
snippet switch
	switch (${1:expression}){
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
# case
snippet case
	case '${1:case}':
		${2}
		break;
	${0}
# for (...) {...}
snippet for
	for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++){
		var ${3:v} = $1[$2];${0:}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --){
		var ${3:v} = $1[$2];${0:}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}){
		${0}
	}
# try
snippet try
	try {
		${1}
	} catch (${2:e}) {
		${0:/* handle error */}
	}
# do...while
snippet do
	do {
		${0}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}){
		${0}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')
# console.log (Firebug)
snippet cl
	console.log(${0});
# return
snippet ret
	return ${0:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}){
		${0:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty(${0})
# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */
# multiline comment
snippet /*
	/*
	 * ${1:comment}
	 */
snippet
# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${0:object});

## Lodash
# _
snippet _
	_(${1:target}).${2:method}(${3:args});
### Arrays / Collections
# _.forEach
snippet _fore
	_.forEach(${1:target}, ${2:func});
# _.forEach anonymous function
snippet _forea
	_.forEach(${1:target}, function(${2:item}){
		${3}
	});
# _.forEachRight
snippet _forer
	_.forEachRight(${1:target}, ${2:func});
# _.forEach anonymous function
snippet _forera
	_.forEachRight(${1:target}, function(${2:item}){
		${3}
	});
# _.map
snippet _map
	_.map(${1:target}, ${2:func});
# _.map anonymous function
snippet _mapa
	_.map(${1:target}, function(${2:item}){
		${3}
	});
# _.findIndex
snippet _findi
	_.findIndex(${1:target}, ${2:func});
# _.findIndex anonymous function
snippet _findia
	_.findIndex(${1:target}, function(${2:val}){
		${3}
	});
# _.findLastIndex
snippet _findli
	_.findLastIndex(${1:target}, ${2:func});
# _.findLastIndex anonymous function
snippet _findlia
	_.findLastIndex(${1:target}, function(${2:val}){
		${3}
	});
# _.indexOf
snippet _idxo
	_.indexOf(${1:target}, ${2:val});
# _.lastIndexOf
snippet _lidxo
	_.lastIndexOf(${1:target}, ${2:val});
# _.contains
snippet _cont
	_.contains(${1:target}, ${2:func});
# _.contains anonymous function
snippet _conta
	_.contains(${1:target}, function(${2:val}){
		${3}}
	});
# _.filter
snippet _filt
	_.filter(${1:target}, ${2:func});
# _.filter anonymous function
snippet _filta
	_.filter(${1:target}, function(${2:val}){
		${3}}	
	});
# _.find
snippet _find
	_.find(${1:target}, ${2:func});
# _.find anonymous function
snippet _finda
	_.find(${1:target}, function(${2:val}){
		${3}	
	});
# _.findLast
snippet _findl
	_.findLast(${1:target}, ${2:func});
# _.findLast anonymous function
snippet _findla
	_.findLast(${1:target}, function(${2:val}){
		${3}
	});
# _.invoke
snippet _inv
	_.invoke(${1:target}, ${2:func});
# _.invoke anonymous function
snippet _inva
	_.invoke(${1:target}, function(${2:val}){
		${3}
	});
### Objects
# _.forOwn
snippet _foro
	_.forOwn(${1:target}, ${2:func});
# _.forOwn anonymous function
snippet _foroa
	_.forOwn(${1:target}, function(${2:item}){
		${3}
	});
# _.extend
snippet _ex
	_.extend(${1:obj1}, ${2:obj2});
# _.transform
snippet _trans
	_.transform(${1:target}, ${2:func});
# _.transform anonymous function
snippet _transa
	_.transform(${1:target}, function(${2:result}, ${3:val}, ${4:key}){
		${5}
	});
# _.defaults
snippet _def
	_.defaults(${1:obj1}, ${2:obj2});
### Functions
# _.bind
snippet _bind
	_.bind(${1:func}, ${2:this});
# _.bind anonymous function
snippet _binda
	_.bind(function(${1:args}){
		${3}
	}, ${2:this});
# _.bindKey
snippet _bindk
	_.bindKey(${1:this}, '${2:prop}');
# _.partial
snippet _part
	_.partial(${1:func}, ${2:args});
# _.partial anonymous function
snippet _parta
	_.partial(function(${1:args}){
		${3}
	}, ${2:args});

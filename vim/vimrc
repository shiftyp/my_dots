" Pathogen
filetype off
call pathogen#incubate()
call pathogen#helptags()
filetype plugin indent on
" Enable sytax highlighting
syntax enable
" Hide buffers instead of closing them
set hidden
" Set tab and shift widthds
set tabstop=2
set shiftwidth=2
" Set backspace behavior
set backspace=2
" Set list
:set listchars=tab:â–¸\ 
" Set line numbers
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
	set mouse=a
endif
" tmux will only forward escape sequences to the terminal if surrounded by a DCS sequence
" http://sourceforge.net/mailarchive/forum.php?thread_name=AANLkTinkbdoZ8eNR1X2UobLTeww1jFrvfJxTMfKSq-L%2B%40mail.gmail.com&forum_name=tmux-users
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
set number
" Set theme
set background=dark
set guifont=Consolas:h20
if !has('gui_running')
	let g:solarized_termtrans=1
else
	let g:solarized_termtrans=0
endif
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
let g:solarized_termcolors=16
" indent guides
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=base02 ctermbg=8
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=base03 ctermbg=0
colorscheme solarized
" Move the alt arrow keys
:map ; <right>
:map l <down>
:map k <up>
:map j <left>
" yo and yO from unimpaired.vim https://github.com/tpope/vim-unimpaired
function! s:setup_paste() abort
	let s:paste = &paste
	let s:mouse = &mouse
	set paste
	set mouse=
endfunction

nnoremap <silent> <Plug>unimpairedPaste :call <SID>setup_paste()<CR>

nnoremap <silent> yo	:call <SID>setup_paste()<CR>o
nnoremap <silent> yO	:call <SID>setup_paste()<CR>O

augroup unimpaired_paste
	autocmd!
	autocmd InsertLeave *
				\ if exists('s:paste') |
				\		let &paste = s:paste |
				\		let &mouse = s:mouse |
				\		unlet s:paste |
				\		unlet s:mouse |
				\ endif
augroup END
" Highlight search terms
set hlsearch
" CTRLP
let g:ctrlp_max_files=0
set wildignore+=*/.git/*,*/node_modules/*
let g:ctrlp_prompt_mappings = {
	\ 'AcceptSelection("e")': [],
	\ 'AcceptSelection("t")': ['<cr>', '<c-m>'],
	\ }
" Unite
nnoremap <silent> <Leader>m :Unite -direction=below -buffer-name=recent -winheight=10 file_mru<cr>
nnoremap <silent> <Leader>b :Unite -direction=below -winheight=10 buffer<cr>
let g:unite_source_history_yank_enable = 1
nnoremap <leader>y :Unite -direction=below -buffer-name=yank history/yank<CR>
nnoremap <Leader>f :Unite -direction=below vcs_grep<cr>
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#source('file_rec/async','sorters','sorter_rank')
" call unite#custom#source('file_rec,file_rec/async','ignore_pattern','\(.*\.git\/\|.*node_modules\/.*\|.*build\/.*\)')
nnoremap <Leader>o :Unite -direction=below -start-insert -buffer-name=files -winheight=10 file_rec/async<cr>
" syntastic checkers
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_less_checkers = ['recess']
let g:syntastic_handlebars_checkers = ['handlebars']
" Emmet configuration
let g:user_emmet_install_global = 0
autocmd FileType html,hbs,css EmmetInstall
let g:user_emmet_leader_key='<C-E>'
let g:user_emmet_settings = {
	\	'xml' : {
	\		 'extends' : 'html',
	\	},
	\	'hbs' : {
	\		 'extends' : 'html',
	\	}
	\}
" Mustache / Handlebars
let g:mustache_abbreviations = 1
" Lightline
let g:lightline = {
	\'colorscheme': 'solarized',
	\	'active': {
	\		'left': [['mode','paste'],['fugitive','filename','modified']],
	\		'right': [['syntastic','lineinfo'],['percent'],['fileformat','fileencoding','filetype']]
	\	},
	\	'component': {
	\		'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}',
	\		'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}'
	\	},
	\	'component_visible_condition': {
	\		'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())',
	\		'modified': '(&filetype!="help"&&(&modified||!&modifiable))'
	\	},
	\	'component_expand': {
	\		'syntastic': 'SyntasticStatuslineFlag',
	\ },
	\ 'component_type': {
	\		'syntastic': 'error',
	\ },
	\}
augroup AutoSyntastic
	autocmd!
	autocmd BufWritePost *.js,*.hbs,*.less call s:syntastic()
augroup END
function! s:syntastic()
	SyntasticCheck
	call lightline#update()
endfunction
set laststatus=2
" Map space to toggle search highlighting
:noremap <Space> :set hlsearch! hlsearch?<CR>
" Sets directory for swp files
set directory=~/.tmp/
" CloseTag plugin
autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag.vim/plugin/closetag.vim
" Conceal level
" au FileType javascript setl conceallevel=2 concealcursor=nclet g:syntax_js=['function', 'semicolon', 'comma', 'return', 'this', 'proto']
" Code Folding
" au FileType javascript setl fdm=marker fmr=/*,*/
" autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
" autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif
" gundo
let g:gundo_preview_bottom=1
nnoremap <F5> :GundoToggle<CR>
" yankstack
let g:yankstack_map_keys = 0
nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_newer_paste
